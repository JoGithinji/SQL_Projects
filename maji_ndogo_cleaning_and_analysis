/*employee table has info on all of the workers, but the email addresses have not been added. 
We will have to send them reports and figures, so I'll update it. 
The emails for the department have this format: first_name.last_name@ndogowater.gov. */

use md_water_services;

SELECT
CONCAT(LOWER(REPLACE(employee_name, ' ', '.')), '@ndogowater.gov') AS new_email
FROM
employee;

SET SQL_SAFE_UPDATES = 0;

UPDATE employee
SET email = CONCAT(LOWER(REPLACE(employee_name, ' ', '.')), '@ndogowater.gov');
select * from employee;

/* The phone numbers should be 12 characters long, consisting of the plus sign, area code (99), and the phone number digits. However, when we use
the LENGTH(column) function, it returns 13 characters, indicating there's an extra character.
 */
 SELECT LENGTH(phone_number) FROM employee;
 
 -- upon investigation I discovered that there is a space at the end of the number
 -- If one tries to send an automated SMS to that number it will fail.
 -- to fix this issue I used the function TRIM
 
 UPDATE employee
SET phone_number = TRIM(phone_number);

-- Having a look at where the employees live.
select * from employee;
select town_name, count(province_name) as number_of_employees from employee
group by town_name;



-- get the number of records each employee collected.
select * from visits;
select  v.assigned_employee_id, e.employee_name, count(v.record_id) records_collected from visits v
inner join employee e
on e.assigned_employee_id = v.assigned_employee_id
group by v.assigned_employee_id
order by count(v.record_id) desc;



-- getting the number of records collected per town
with cte as (select v.location_id, l.town_name, count(v.record_id) records from location l
inner join visits v
on v.location_id = l.location_id
group by v.location_id
order by count(v.record_id) desc)

select town_name, count(records) as record_count from cte
group by town_name
order by count(records) desc ;


-- Counting the records per province.
with cte2 as (select v.location_id, l.province_name, count(v.record_id) records from location l
inner join visits v
on v.location_id = l.location_id
group by v.location_id
order by count(v.record_id) desc)

select province_name, count(records) as record_count from cte2
group by province_name
order by count(records) desc ;



-- grouping both province_name and town_name together
with cte3 as (select v.location_id, l.province_name, l.town_name, count(v.record_id) records from location l
inner join visits v
on v.location_id = l.location_id
group by v.location_id
order by count(v.record_id) desc)

select province_name, town_name, count(records) as record_count from cte3
group by province_name, town_name
order by province_name, record_count desc ;


-- looking at the number of records for each location type
with cte4 as (select v.location_id, l.location_type, count(v.record_id) records from location l
inner join visits v
on v.location_id = l.location_id
group by v.location_id
order by count(v.record_id) desc)

select location_type , count(records) as record_count from cte4
group by location_type
order by count(records) desc ;

-- how many people were surveyed?
select sum(number_of_people_served) from water_source;

-- How many wells, taps and rivers are there?
select type_of_water_source, count(type_of_water_source) from water_source
group by type_of_water_source;

-- How many people share particular types of water sources on average?
select type_of_water_source, round(avg(number_of_people_served)) avg_people_served from water_source
group by type_of_water_source;

-- How many people are getting water from each type of source?
select type_of_water_source,sum(number_of_people_served) as total_people_served from water_source 
group by type_of_water_source
order by sum(number_of_people_served) desc ;

-- of the above get percentage of total 
with cte5 as 
(select type_of_water_source,sum(number_of_people_served) as total_people_served from water_source 
group by type_of_water_source
order by sum(number_of_people_served) desc) 

SELECT 
    type_of_water_source,
    total_people_served,
    ROUND((total_people_served / SUM(total_people_served) OVER ()) * 100, 2) AS percentage_of_total,
    RANK() OVER (ORDER BY total_people_served DESC) AS rank_by_people_served
FROM 
    cte5;
